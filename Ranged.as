package {	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.media.SoundChannel;	public class Ranged extends MovieClip	{		private var _type:String;		private var _isDragging:Boolean;		private var _hasBeenDragged:Boolean;		private var _hasBeenSet:Boolean;		private var _canShoot:Boolean;		private var _shootTimer:Timer;		private var _arrowSpeed:Number;		private var _radius:Number;		private var _gameScreen:MovieClip;		private var _soundChannel:SoundChannel;		private var _cannonShot:cannonshot;		private var _arrowSound:arrowsound;		public function Ranged()		{			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		private function onAddedToStage(e:Event):void		{			rotation = -90;			// set variables			_soundChannel = new SoundChannel();			_cannonShot = new cannonshot();			_arrowSound = new arrowsound();			if (_type == null)			{				_type = "archers";			}			_isDragging = false;			_hasBeenDragged = false;			/*if (parent.name == "rangedDrop1" || parent.name == "rangedDrop2")			{			_hasBeenSet = true;			_canShoot = true;			}			else			{			_hasBeenSet = false;			_canShoot = false;			}*/			_hasBeenSet = false;			_canShoot = false;			_shootTimer = new Timer(3000);			_shootTimer.addEventListener(TimerEvent.TIMER, onShoot);			_shootTimer.start();			_arrowSpeed = 15;			_radius = width / 2;			_gameScreen = MovieClip(parent) as MovieClip;			// add listeners			addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);			addEventListener(MouseEvent.MOUSE_DOWN, onDrag);		}		private function onRemovedFromStage(e:Event):void		{			// remove listeners			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			removeEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);			removeEventListener(MouseEvent.CLICK, onDrag);			_shootTimer.stop();			_shootTimer.removeEventListener(TimerEvent.TIMER, onShoot);		}		private function onShoot(e:TimerEvent):void		{			if (_canShoot)			{				dispatchEvent(new Event("rangedFire", true));								if (_type == "archers")				{					_soundChannel = _arrowSound.play();				}				else if (_type == "cannon")				{					_soundChannel = _cannonShot.play();				}			}		}		// drag and drop code		private function onDrag(e:MouseEvent):void		{			if (! _hasBeenSet)			{				startDrag();				_isDragging = true;				parent.setChildIndex(this, parent.numChildren-1);				stage.addEventListener(MouseEvent.MOUSE_UP, onStopDrag);			}		}		private function onStopDrag(event:MouseEvent):void		{			stopDrag();			_isDragging = false;			_hasBeenDragged = true;			stage.removeEventListener(MouseEvent.MOUSE_UP, onStopDrag);		}		// getters and setters		public function get arrowSpeed():Number		{			return _arrowSpeed;		}		public function get radius():Number		{			return _radius;		}		public function get hasBeenDragged():Boolean		{			return _hasBeenDragged;		}		public function set hasBeenDragged(input:Boolean):void		{			_hasBeenDragged = input;		}		public function get hasBeenSet():Boolean		{			return _hasBeenSet;		}		public function set hasBeenSet(input:Boolean):void		{			_hasBeenSet = input;		}		public function get canShoot():Boolean		{			return _canShoot;		}		public function set canShoot(input:Boolean):void		{			_canShoot = input;		}		public function get isBeingDragged():Boolean		{			return _isDragging;		}		public function get type():String		{			return _type;		}		public function set type(input:String):void		{			_type = input;			if (_type == "cannon")			{				gotoAndStop("cannon");			}			else if (_type == "archers")			{				gotoAndStop("archers");			}		}	}}