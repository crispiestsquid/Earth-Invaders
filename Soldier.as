package {	import flash.display.MovieClip;	import flash.events.Event;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.media.SoundChannel;	public class Soldier extends MovieClip	{		private var _vx:Number;		private var _stageWidth:Number;		private var _advanceAmount:Number;		private var _type:String;		private var _health:Number;		private var _shootTimer:Timer;		private var _arrowSpeed:Number;		private var _radius:Number;		private var _soundChannel:SoundChannel;		private var _arrowSound:arrowsound;		public function Soldier(type:String)		{			_type = type;			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		private function onAddedToStage(e:Event):void		{			rotation = 90;			// set variables			_soundChannel = new SoundChannel();			_arrowSound = new arrowsound();			_vx = 3;			_stageWidth = stage.stageWidth;			_advanceAmount = 36;			_shootTimer = new Timer(1000);			_shootTimer.addEventListener(TimerEvent.TIMER, onShoot);			_arrowSpeed = 12;			_radius = width / 2;			if (_type == "regular")			{				_health = 2;				gotoAndStop("normal");			}			else if (_type == "weak")			{				_health = 1;				gotoAndStop("weak");			}			else if (_type == "strong")			{				_health = 3;				gotoAndStop("strong");			}			else if (_type =="archer")			{				_health = 2;				gotoAndStop("archer");				_shootTimer.start();			}			// add listeners			addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);			addEventListener(Event.ENTER_FRAME, Update);		}		private function onRemovedFromStage(e:Event):void		{			// remove listeners			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			removeEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);			removeEventListener(Event.ENTER_FRAME, Update);			_shootTimer.removeEventListener(TimerEvent.TIMER, onShoot);			_shootTimer.stop();		}		private function onShoot(e:TimerEvent):void		{			if (this != null && y >= 0)			{				if (Math.floor(Math.random() * (10 - 1 + 1) + 1) < 2)				{					fireArrow();					//_soundChannel = _arrowSound.play();				}			}		}		private function Update(e:Event):void		{			x +=  _vx;			// check to see if ready to advance			if (x + width / 2 > _stageWidth)			{				x = _stageWidth - width / 2;				dispatchEvent(new Event("advance", true));			}			if (x - width / 2 < 0)			{				x = 0 + width / 2;				dispatchEvent(new Event("advance", true));			}						if (y >= stage.stageHeight)			{				dispatchEvent(new Event("gameOver", true));			}			// check collision with blocks			MovieClip(parent).checkCollisionWithBlocks(this);		}		private function fireArrow():void		{			// calculate the angle of the enemy in radians			var _angle:Number = rotation * Math.PI / 180;			// calculate the Arrow's velocity on x and y			var _enemyArrowVx:Number = Math.cos(_angle) * _arrowSpeed;			var _enemyArrowVy:Number = Math.sin(_angle) * _arrowSpeed;			// calculate Arrow start position			var _enemyArrowStartX:Number = (x) + _radius * Math.cos(_angle);			var _enemyArrowStartY:Number = (y) + _radius * Math.sin(_angle);			if (MovieClip(parent) != null)			{				// actually create the Arrow				MovieClip(parent).addChild(new SoldierArrow(_enemyArrowVx, _enemyArrowVy, _enemyArrowStartX, _enemyArrowStartY));			}		}		public function advance():void		{			_vx *=  -1;			y +=  _advanceAmount;		}		public function hit(damage:Number):void		{			_health -=  damage;		}		public function get health():Number		{			return _health;		}	}}