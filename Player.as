package {	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.media.SoundChannel;	public class Player extends MovieClip	{		private var _vx:Number;		private var _arrowSpeed:Number;		private var _radius:Number;		private var _coolDown:Timer;		private var _cool:Boolean;		private var _arrowType:String;		private var _soundChannel:SoundChannel;		private var _arrowSound:arrowsound;		public function Player()		{			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		private function onAddedToStage(e:Event):void		{			rotation = -90;			legs.stop();			// set variables			_soundChannel = new SoundChannel();			_arrowSound = new arrowsound();			_arrowType = "normal";			_vx = 0;			_arrowSpeed = 15;			_radius = width / 2;			_cool = true;			_coolDown = new Timer(200,1);			_coolDown.addEventListener(TimerEvent.TIMER_COMPLETE, onCoolDown);			// add listeners;			addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);			addEventListener(Event.ENTER_FRAME, Update);			MovieClip(parent).addEventListener(KeyboardEvent.KEY_DOWN, onKeyPress);			MovieClip(parent).addEventListener(KeyboardEvent.KEY_UP, onKeyRelease);		}		private function onRemovedFromStage(e:Event):void		{			// remove listeners			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			removeEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);			removeEventListener(Event.ENTER_FRAME, Update);			MovieClip(parent).removeEventListener(KeyboardEvent.KEY_DOWN, onKeyPress);			MovieClip(parent).removeEventListener(KeyboardEvent.KEY_UP, onKeyRelease);		}		private function Update(e:Event):void		{			// move the player			x +=  _vx;						if (x + width / 2 > stage.stageWidth)			{				x = stage.stageWidth - width / 2;			}			else if (x - width / 2 < 0)			{				x = 0 + width / 2;			}						if (_arrowType == "normal")			{				gotoAndStop("normal");			}			else if (_arrowType == "penetrating")			{				gotoAndStop("longbow");			}			else if (_arrowType == "strong")			{				gotoAndStop("crossbow");			}			else if (_arrowType == "split")			{				gotoAndStop("splitshot");			}		}		private function onCoolDown(e:TimerEvent):void		{			if (! _cool)			{				_cool = true;				_coolDown.stop();			}		}		private function onKeyPress(e:KeyboardEvent):void		{			switch (e.keyCode)			{				case Keyboard.RIGHT :					_vx = 7;					legs.play();					break;				case Keyboard.LEFT :					_vx = -7;					legs.play();					break;				case Keyboard.SPACE :					if (_cool)					{						fireArrow();						_soundChannel = _arrowSound.play();						_cool = false;						_coolDown.start();					}					break;			}		}		private function onKeyRelease(e:KeyboardEvent):void		{			switch (e.keyCode)			{				case Keyboard.RIGHT :					_vx = 0;					legs.stop();					break;				case Keyboard.LEFT :					_vx = 0;					legs.stop();					break;			}		}		private function fireArrow():void		{			if (_arrowType == "normal")			{				// calculate the angle of the player in radians				var _angle:Number = this.rotation * Math.PI / 180;				// calculate the arrow's velocity on x and y				var _arrowVx:Number = Math.cos(_angle) * _arrowSpeed;				var _arrowVy:Number = Math.sin(_angle) * _arrowSpeed;				// calculate arrow's start position				var _arrowStartX:Number = (x) + _radius * Math.cos(_angle);				var _arrowStartY:Number = (y) + _radius * Math.sin(_angle);				// actually create the arrow				MovieClip(parent).addChild(new Arrow(_arrowVx, _arrowVy, _arrowStartX, _arrowStartY, rotation, "player"));			}			else if (_arrowType == "penetrating")			{				// calculate the angle of the player in radians				var _anglep:Number = this.rotation * Math.PI / 180;				// calculate the arrow's velocity on x and y				var _arrowVxp:Number = Math.cos(_anglep) * _arrowSpeed;				var _arrowVyp:Number = Math.sin(_anglep) * _arrowSpeed;				// calculate arrow's start position				var _arrowStartXp:Number = (x) + _radius * Math.cos(_anglep);				var _arrowStartYp:Number = (y) + _radius * Math.sin(_anglep);				// actually create the arrow				MovieClip(parent).addChild(new Arrow(_arrowVxp, _arrowVyp, _arrowStartXp, _arrowStartYp, rotation, "player"));			}			else if (_arrowType == "split")			{				// calculate the angle of the player in radians				var _angle1:Number = -95 * Math.PI / 180;				// calculate the arrow's velocity on x and y				var _arrowVx1:Number = Math.cos(_angle1) * _arrowSpeed;				var _arrowVy1:Number = Math.sin(_angle1) * _arrowSpeed;				// calculate arrow's start position				var _arrowStartX1:Number = (x) + _radius * Math.cos(_angle1);				var _arrowStartY1:Number = (y) + _radius * Math.sin(_angle1);				// actually create the arrow				MovieClip(parent).addChild(new Arrow(_arrowVx1, _arrowVy1, _arrowStartX1, _arrowStartY1, -95, "player"));								// calculate the angle of the player in radians				var _angle2:Number = -85 * Math.PI / 180;				// calculate the arrow's velocity on x and y				var _arrowVx2:Number = Math.cos(_angle2) * _arrowSpeed;				var _arrowVy2:Number = Math.sin(_angle2) * _arrowSpeed;				// calculate arrow's start position				var _arrowStartX2:Number = (x) + _radius * Math.cos(_angle2);				var _arrowStartY2:Number = (y) + _radius * Math.sin(_angle2);				// actually create the arrow				MovieClip(parent).addChild(new Arrow(_arrowVx2, _arrowVy2, _arrowStartX2, _arrowStartY2, -85, "player"));			}			else if (_arrowType == "strong")			{				// calculate the angle of the player in radians				var _angles:Number = this.rotation * Math.PI / 180;				// calculate the arrow's velocity on x and y				var _arrowVxs:Number = Math.cos(_angles) * _arrowSpeed;				var _arrowVys:Number = Math.sin(_angles) * _arrowSpeed;				// calculate arrow's start position				var _arrowStartXs:Number = (x) + _radius * Math.cos(_angles);				var _arrowStartYs:Number = (y) + _radius * Math.sin(_angles);				// actually create the arrow				MovieClip(parent).addChild(new Arrow(_arrowVxs, _arrowVys, _arrowStartXs, _arrowStartYs, rotation, "player"));			}		}				public function get arrowType():String		{			return _arrowType;		}				public function set arrowType(input:String):void		{			_arrowType = input;		}	}}