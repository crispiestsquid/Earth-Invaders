package {	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.utils.Timer;	import flash.events.TimerEvent;	public class Block extends MovieClip	{		private var _type:String;		private var _isDragging:Boolean;		private var _hasBeenDragged:Boolean;		private var _hasBeenSet:Boolean;		private var _health;		private var _knightCool:Boolean;		private var _knightCoolDown:Timer;		public function Block()		{			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		private function onAddedToStage(e:Event):void		{			// set variables			if (_type == null)			{				_type = "wall";				_health = 10;			}			if (parent.name == "blockDrop1" || parent.name == "blockDrop2")			{				_hasBeenSet = true;			}			else			{				_hasBeenSet = false;			}			_isDragging = false;			_hasBeenDragged = false;						_knightCoolDown = new Timer(750, 1);			_knightCoolDown.addEventListener(TimerEvent.TIMER_COMPLETE, onCoolDown);			// add listeners			addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);			addEventListener(MouseEvent.MOUSE_DOWN, onDrag);			addEventListener(Event.ENTER_FRAME, Update);		}		private function onRemovedFromStage(e:Event):void		{			// remove listeners			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			removeEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);			removeEventListener(MouseEvent.CLICK, onDrag);			removeEventListener(Event.ENTER_FRAME, Update);		}				private function Update(e:Event):void		{			if (currentFrame != 4 && _type == "wall")			{				if (_health < 5)				{					this.block.gotoAndStop("damaged");				}			}			else if (currentFrame != 4 && _type == "brickWall")			{				if (_health < 9)				{					this.block.gotoAndStop("damaged");				}			}		}				private function onCoolDown(e:TimerEvent):void		{			if (! _knightCool)			{				_knightCool = true;				_knightCoolDown.stop();			}		}		private function onDrag(e:MouseEvent):void		{			if (! _hasBeenSet)			{				startDrag();				_isDragging = true;				parent.setChildIndex(this, parent.numChildren-1);				stage.addEventListener(MouseEvent.MOUSE_UP, onStopDrag);			}		}		private function onStopDrag(event:MouseEvent):void		{			stopDrag();			_isDragging = false;			_hasBeenDragged = true;			stage.removeEventListener(MouseEvent.MOUSE_UP, onStopDrag);		}				public function knightCoolDown():void		{			if (_knightCool)			{				_knightCool = false;				_knightCoolDown.start();			}		}		public function hit():void		{			_health--;		}		public function get cool():Boolean		{			return _knightCool;		}		public function get health():Number		{			return _health;		}		public function get hasBeenDragged():Boolean		{			return _hasBeenDragged;		}		public function set hasBeenDragged(input:Boolean):void		{			_hasBeenDragged = input;		}		public function get hasBeenSet():Boolean		{			return _hasBeenSet;		}		public function set hasBeenSet(input:Boolean):void		{			_hasBeenSet = input;		}		public function get isBeingDragged():Boolean		{			return _isDragging;		}		public function get blockType():String		{			return _type;		}		public function set type(input:String):void		{			_type = input;			if (_type == "brickWall")			{				gotoAndStop("brickWall");				_health = 20;			}			else if (_type == "knight")			{				gotoAndStop("knight");				_health = 15;				_knightCool = true;			}		}	}}